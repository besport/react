-------------------------------------------------------------------------------
React - Declarative events and signals for OCaml
        Release 0.9.4
-------------------------------------------------------------------------------

React is an OCaml module for functional reactive programming (FRP). It
provides support to program with time varying values : declarative
events and signals. React doesn't define any primitive event or
signal, it lets the client chooses the concrete timeline.

React is made of a single, independent, module and distributed under
the BSD3 license. 

Home page: http://erratique.ch/software/react
Contact: Daniel BÃ¼nzli <daniel.buenzli at erratique.ch>


Installation
------------

To install React you need at least : 

    OCaml >= 3.11.0  

If you have `findlib`, it can be installed by typing :

    ocaml setup.ml -configure
    ocaml setup.ml -build 
    ocaml setup.ml -install

If you don't, `react.mli` and `react.ml` contain everything, the
code, the documentation and the license. Install the dependencies and
use the sources the way you want. For example if you use `ocamlbuild`
you can issue the following commands from the root directory of your
project :

    ln -s /path/to/react-0.9.4/src react
    echo "<react> : include" >> _tags


Documentation
-------------

The documentation and API reference is automatically generated by
`ocamldoc` from `react.mli`. For you convenience you can find a
generated version in the `doc` directory of the distribution.


Sample programs
---------------

Sample programs are located in the `test` directory of the
distribution. They can be built with : 

    ocamlbuild test/tests.otarget

The resulting binaries are in `_build/test` :

- `test.native` tests the library, nothing should fail.
- `clock.native` is a command line program using ANSI escape sequences 
  and the Unix module to print the current local time. 
- `breakout.native` is a command line program using ANSI escape sequences
  and the Unix module to implement a simple breakout game.
